C++ 예외처리

예외 처리 기초
형식
try {
	// try block	에러 발생에 대해 감시하고자 하는 프로그램 부분을 포함
} catch (type1 arg) {
	// catch block
} catch (type2 arg) {
	// catch block	예외 처리, 예외의 형이 어느 catch 문을 사용할 것인가를 결정
}

예외의 형이 어느 catch문을 사용할 것인가를 결정
-예외의 형이 catch문에 명시된 자료형과 일치해야만 한다.
프로그램에서 throw문을 이용하여 예외를 발생시킬 수 있다.
-형식 : throw 'exception';
-throw는 exception에 의해 명시된 예외를 발생시킨다.
적용될 catch문이 없는 예외가 던져진다면, 비정상적인 프로그램 종료가 발생할 수 있다.

ex)
// 간단한 예외 처리 예
#include <iostream>
using namespace std;

int main() {
	cout << "start\n";
	try {
		cout << "Inside try block\n";
		throw 99;		// 예외가 던져지면 catch문으로 제어가 넘어가고 try 블록은 종료된다.
		cout << "This will not execute";
	} catch (int i) {
		cout << "Caught an exception -- value is: ";
		cout << i << "\n";
	}
	cout << "end";
	return 0;
}

클래스 형의 잡기
ex)
// 예외 클래스를 사용한다.
#include <iostream>
#include <cstring>
using namespace std;

class MyException {
public:
	char str_what[80];

	MyException() { *str_what = 0; }
	
	MyExcpetion(char *s) { strcpy(str_what, s); }
};	// 예외를 위한 클래스를 정의하는 가장 공통된 이유는 발생했던 에러를 설명하는 객체를 생성하기 위한 것

int main() {
	int a, b;

	try {
		cout << "Enter numerator and denominator: ";
		cin >> a >> b;
		if(!b) throw MyException("Cannot divide by zero!");
		else cout << "Quotient is " << a/b << "\n";
	} catch (MyException e) {
		cout << e.str_what << "\n";
	}
	return 0;
}

다중 catch 문의 사용
ex)
#include <iostream>
using namespace std;

// 다른 형의 예외를 잡을 수 있다.
void Xhandler(int test) {
	try {
		if(test) throw test;
		else throw "Value is zero";
	} catch(int i) {
		cout << "Caught One! Ex.#: " << i << "\n";
	} catch(char *str) {
		cout << "Caught a string: ";
		cout << str << "\n";
	}
}	// catch 식은 프로그램에 있는 순서대로 확인된다. 단 하나의 일치하는 문장만이 실행된다.
	모든 다른 catch블록은 무시된다.

int main() {
	cout << "start\n";
	
	Xhandler(1);
	Xhandler(2);
	Xhandler(0);
	Xhandler(3);

	cout << "end";
	
	return 0;
}

기본 클래스의 예외 잡기
기본 클래스를 위한 catch 문은 그 기본 클래스로부터 파생된 어떤 클래스와도 일치한다
기본 클래스형과 파생 클래스형 모두의 예외를 잡고 싶다면, 여러 catch문들 중 첫번째에 파생 클래스를 둔다
-그렇지 않다면, 기본 클래스 catch가 모든 파생 클래스들을 잡을 것이다.

// 파생 클래스를 잡는다.
#include <iostream>
using namespace std;

class B {
};

class D: public B {
};

int main() {
	D derived;
	try {
		threow dervied;
	} catch(B b) {
		cout << "Caught a base class.\n";
	} catch(D d) {
		cout << "This won't execute.\n";
	}
	return 0;
}

// 이 프로그램은 모든 예외들을 잡는다.
#include <iostream>
using namespace std;

void Xhandler(int test) {
	try {
		if (test == 0) throw test;	// int를 던진다.
		if (test == 1) throw 'a';	// char를 던진다.
		if (test == 2) throw 123.23;	// double을 던진다.
	} catch(int i) {
		cout << "Caught " << i <<"\n";
	} catch(...) {	// 모든 예외들을 잡는다.
		cout << "Caught One!\n";
	}
}	// 모든 예외들을 잡음으로써, 처리되지 않은 예외가 비정상적으로 프로그램을 종료시키는 것을 방지

int main() {
	cout << "start\n";

	Xhandler(0);
	Xhandler(1);
	Xhandler(2);

	cout << "end";
	
	return 0;
}

함수에 의해 던져진 예외를 제한하기
함수가 자신 밖으로 던질 수 있는 예외의 형을 제한할 수 있따.
형식
ret-type func-name(arg-list) throw(type-list) {
	// ....
}
콤마로 분리된 type-list에 포함된 자료형만이 이 함수에 의해 던져질 수 있다
-다른 형을 던지는 것은 비정상적인 프로그램 종료를 하게 한다
-어떠한 예외도 던질 수 없게 하고 싶다면, 빈 리스트를 사용

ex)
// 함수가 던지는 예외 형을 제한한다.
#include <iostream>
using namespace std;

// 이 함수는 단지 int, char, double 만을 던질 수 있다.
void Xhandler(int test) throw(int, char, double) {
	if (test == 0) throw test;	// int를 던진다.
	if (test == 1) throw 'a';	// char를 던진다.
	if (test == 2) throw 123.23;	// double을 던진다.
}

int main() {
	cout << "start\n";

	try {
		Xhandler(0);	// 또한, 1과 2와 함께 Xhandler()를 호출해 보라.
	} catch(int i) {
		cout << "Caught int\n";
	} catch(char c) {
		cout << "Caught char\n";
	} catch(double d) {
		cout << "Caught double\n";
	}

	cout << "end";
	return 0;
}