가상함수와 다형성

파생형에 대한 포인터
기본 클래스 포인터는 그 기본 클래스에서 파생된 어떠한 클래스의 객체도 가리킬 수 있지만
파생 클래스에 대한 포인터를 이용하여 기본 클래스 형의 객체를 접근할 수 없다.
기본 클래스 포인터를 이용하여 파생 클래스에 의해 정의된 원소들을 접근하려면, 그것을 파생 클래스의 포인터로 형변환시켜야 한다.
ex) ((D_Class*)p)->show_title();	// 파생 클래스의 포인터로 형변환
포인터는 기본형과 관련하여 증가하거나 감소될 수 있다.
기본 클래스 참조도 파생 형의 객체를 참조하는데 사용될 수 있다.
-기본 클래스 참조 매개변수는 기본 클래스의 객체 뿐만  아니라 그 기본 클래스에서 파생된 클래스의 객체를 받을 수 있다.
ex)
// 파생 클래스 객체에 대해 기본 클래스 포인터를 사용한다.
#include <iostream>
#include <cstring>
using namespace std;

class B_class {
private:
	char author[80];
public:
	void put_author(const char *s) { strcpy_s(author, s); }
	void show_author() { cout << author << "\n"; }
};

class D_class : public B_class {
private:
	char title[80];
public:
	void put_title(const char *num) { strcpy_s(title, num); }
	void show_title() {	cout << Title: "; << title << "\n"; }
};

int main() {
	B_class *p;
	B_class B_ob;

	D_class *dp;
	D_class D_ob;

	p = &B_ob;	// base의 주소(파생 클래스를 가리킬 수 있다)

	// 포인터를 통해 B_class를 접근한다.
	p->put_author("Tom Clancy");

	// 포인터를 통해 D_class를 접귾나다.
	p = &D_ob;
	p->put_author("William Shakespeare");

	// 각 저자가 적절한 객체에 저장되었음을 보여준다.
	B_ob.show_author();
	D_ob.show_author();
	cout << "\n";

	/* put title()과 show_title()이 기본 클래스의 일부분이 아니므로, 이들은 기본 포인터인 p를 통해 접근할 수 없으며
	직접 또는 아래에서 볼 수 있듣시 파생 클래스에 대한 포인터를 통해 접근되어야만 한다*/
	dp = &D_ob;
	dp->put_title("The Tempest");
	p->show_author();	// p 또는 dp가 사용될 수 있다.
	dp->show_title();	// 또는 ((D_class *)p)->show_title();
	return 0;
}

가상 함수
실행 시간 다형성을 실현하기 위한 방법
기본 클래스에서 virtual로 선언되고 하나 또는 그 이상의 파생 클래스에서 재정의되는 함수
-각 파생 클래스는 자신만의 가상 함수 버전을 가질 수 있다.
가상 함수 선언
-기본 클래스 내부에서 선언부 앞에 virtual 키워드를 둠
다형성 클래스
-가상 함수를 포함하는 클래스(기본 클래스를 상속받는 클래스에도 적용)
ex)
// 가상 함수를 사용하는 짧은 프로그램이다.
#include <iostream>
using namespace std;

class base {
public:
	virtual void who() { cout << "Base\n"; }	// 가상 함수 선언
};

class first_d : public base {
public:
	void who() { cout << "First derivation\n"; }
};

class second_d : public base {
public:
	void who() { cout << "Second derivation\n"; }
};	// 정의하지 않을시 그대로 사용

int main() {
	base base_obj;
	base *p;
	first_d first_obj;
	second_d second_obj;
	
	p = &base_obj;
	p->who();	// base의 who를 접근한다.
	
	p = &first_obj;
	p->who();	// first_d의 who를 접근한다.

	p = &second_obj;
	p->who();	// second_d의 who를 접근한다.
	// 기본 클래스 포인터는 파생 클래스의 객체를 참조할 수 있다.
	return 0;
}
/*who()는 가상으로 선언되기 때문에, C++는 실행 시에 p가 가리키는 객체의 형에 의해
어떤 버전의 who()가 참조되는지를 결정한다.*/

가상 함수의 특징
매개변수의 형 또는 수가 반드시 같아야만 한다(만약 프로토타입이 다르다면, 그 함수는 단수히 중복된 것으로 생각되며,
가상 함수의 성질을 잃게 된다.)
가상 함수를 정의하는 클래스의 프렌드가 아닌 멤버가 아닌 멤버가 되어야만 한다 (프렌드 함수가 될 수 없다. 무조건 멤버 함수로만)
소멸자 함수가 가상 함수로 된느 것은 허용되나, 생성자 함수가 가상 함수로 되는 것은 허용되지 않는다

가상 함수의 상속
어떤 함수가 가상으로 선언되면, 많은 레벨의 파생 클래스들이 생성된다 하더라도 역시 가상으로 남는다
ex)
// base로부터가 아니라 first_d로부터 파생된다.
class second_d : public first_d {
public:
	void who() { cout << "Second derivation\n"; }
};
who()는 여전히 가상이며, 적절한 버전이 정확하게 선택된다.

가상 함수의 필요성
가상 함수와 파생 클래스로 실행 시간 다형성 제공
-다형성 : "하나의 인터페이스, 여러 가지 방법들"
가상 함수의 사용으로 기본 클래스는 모든 파생 클래스에서 사용될 원형 인터페이스를 정의할 수 있게 된다.

가상 함수의 간단한 응용
#include <iostream>
using namespace std;

class figure {
protected:
	double x, y;
public:
	void set_dim(double i, double j) { x = i; y = j; }
	virtual void show_area() {
		cout << "No area computation defined";
		cout << "for this class.\n";
	}
};

class triangle : public figure {
public:
	void show_area() {
		cout << "Triangle with height ";
		cout << x << " and base " << y;
		cout << " has an area of";
		cout << x * 0.5 * y << "\n";
	}
};

class rectangle : public figure {
public:
	void show_area() {
		cout << "Rectangle with dimensions ";
		cout << x<< "x" << y;
		cout << " has an area of";
		cout << x * y << "\n";
	}
};

int main() {
	figure *p;	// 기본 형에 대한 포인터

	triangle t;
	rectangle s;

	p = &t;
	p->set_dim(10.0, 5.0);
	p->show_area();

	p = &s;
	p->set_dim(10.0, 5.0);
	p->show_area();

	return 0;
}

순수 가상 함수
기본 클래스 내에 선언되며, 기본 클래스와 연관된 정의를 갖지 않는 함수
-파생 클래스는 자신의 버전을 정의해야만 한다
형식
virtual type func-name(parameter-list) = 0;
-type : 함수의 반환형
-func_name : 함수의 이름
-= 0 : 순수 가상 함수를 지정
ex)
class figure {
protected:
	double x, y;
public:
	void set_dim(double i, double j) { x= i; y = j; }
	virtual void show_area() = 0;	// 순수 가상 함수(몸체부분이 없고 프로토타입만 있다)
};
아버지 클래스에 순수 가상 함수가 있다면 자식 클래스에서는 무조건 재정의해야 한다.

추상 클래스
하나 이상의 순수 가상 함수를 가지고 있는 클래스
추상 클래스의 객체는 있을 수 없다.
-하나 또는 그 이상의 함수가 정의를 갖고 있지 않기 때문이다.
추상 클래스는 다른 파생 클래스의 기본 클래스로만 사용되어져야 한다.