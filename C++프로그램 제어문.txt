if문
조건 식이 참이면 if 뒤의 실행문 또는 실행문 블록을 실행하고 그렇지 않다면
else 뒤의 실행문 블록이 실행될 것이다.

조건식
식의 유형이 관계와 논리 연산자만이 아니라. 참 또는 거짓의 결과로 계산되면 된다.
-0의 값은 자동으로 false로 변환되고, 0이 아닌 모든 값은 true로 변환된다.

if-else-if 구조
조건식은 위에서 아래 방향으로 계산된다.
참 조건은 만나자마자 그것과 관련된 문장이 실행되고 나머지 부분은 통과된다.
조건들 중의 하나가 참이 아니라면 마지막 else 문이 실행된다.

for 반복문
조건이 만족하는 동안 지정된 횟수를 반복 실행
사용 변수의 역할
-초기화 : 반복 제어 변수에 초기값을 설정
-식 : 반복을 계속할 것인가를 결정하는 조건식
-증가연산 : 반복 제어 변수의 증감값

for 반복문의 변형
콤마는 초기화 문장을 구분하고 증가 연산 문장을 구분한다
실용저긴 면에서 두 개 또는 세 개 이상은 for 반복문을 이해하기 어렵게 만든
ex)
for (x=0, y=0; x<=10; ++x, --y) cout << x << ' ' << y << '\n';

생략되는 부분
증가연산 부분의 생략
ex) for (x=0; x != 123; )
초기값 치환 부분의 생략
for ( ; x < tablimit; x++)

무한 반복
for (;;)

범위기반 for 반복문
배열 원소의 개수 만큼 반복
for (auto 변수 : 배열이름)	// 일반변수
for (auto &변수 : 배열이름) 	// 참조형 변수

switch문
다중 선택문
switch문의 식은 문자 또는 정수 값으로 계산되어야만 한다
default의 실행문들은 어느 것도 일치하지 않으면 수행된다.
16,384개의 case 문을 가질 수 있다.

break문
break를 만날 때 프로그램의 흐름은 전체 switch문에서 빠져나가서 switch 밖의 다음 문장에서 계속
만일 break문이 없다면 case안에 있는 모든 문장들과 그 다음 case들에 있는 실행문들이 break를 만날 때까지 실행
(또는 switch의 끝까지)

while 반복문
while(expression) statement;
문장은 단일 실행문이거나 실행문들의 블록
식은 반복을 제어하는 조건

do-while 반복문
do-while 반복문은 반복의 끝에서 조건 확인
항상 적어도 한 번은 실행된다.
조건식은 참일 동안 계속 실행

continue문
continue문은 자신과 반복을 제어하는 조건식 사이의 명령문을 생략하고 다음 반복으로 넘어가게 한다.
while과 do-while 에서의 흐름은 직접 조건식으로 보내고, 그 다음 반복 과정을 계속한다.
(조건문이 거짓일시 반복은 종료된다.0
for의 경우, 반복문의 증가연산이 수행되며, 조건식이 실행되고 반복이 계속 된다.

반복문을 벗어나는 break문
break문을 반복문 내에서 만나면 반복은 즉각 종료
프로그램의 실행은 그 반복문 뒤에 있는 문장에서 다시 시작

