상속성의 개요
하나의 클래스가 다른 클래스를 자신의 선언 속으로 합병할 수 있게 함으로써 상속성을 지원
각 파생 클래스는 일반적인 분류의 한 부분이지만 자신만의 요구에 정확히 맞게 할 수 있다.

상속을 위한 일반적인 형식
class derived-class: access base-class {
	body of new class
};

access: public, private 또는 protected (접근지정자)

ex)
class road_vehicle {
private:
	int wheels;
	int passengers'
plublic: 
	void set_wheels(int num) { wheels = num; }
	int get_wheels() { return wheels; }
	void set_pass(int num) { passengers = num; }
	int get_pass() { return passengers; }
};

class truck : public road_vehicle {
private:
	int cargo;
public:
	void set_cargo(int size) { cargo = size;	}
	int get_cargo() { return cargo; }
	void show();
};

// 상속을 보여준다.
#include <iostream>
using namespace std;

class road_vehicle {
private:
	int wheels;
	int passengers;
public:
	void set_wheels(int num) { wheels = num; }
	int get_wheels() { return wheels; }
	void set_pass(int num) { passengers = num; }
	int get_pass() {return passengers; }
};

class truck : public road_vehicle {
private:
	int cargo;
public:
	void set_cargo(int size) { cargo = size; }
	int get_cargo() { return cargo; }
	void show();
};

enum type {car, van, wagon};

class automobile : public road_vehicle {
private:
	enum type car_type;
public:
	void set_type(type t) { car_type = t; }
	enum type get_type() { reutn car_type; }
	void show();
};

void truck::show() {
	cout << "wheels: " << get_wheels() << "\n";
	cout << "passengers: " << get_pass() << "\n";
	cout << "cargo capacity in cubic feet: " << cargo << "\n";
}

void automobile::show() {
	cout << "wheels: " << get_wheels() << "\n";
	cout << "passengers: " << get_pass() << "\n";
	cout << "type: ";
	switch(get_type()) {
	case van: cout << "van\n";
		break;
	case car: cout << "car\n";
		break;
	case wagon: cout << "wagon\n";
	}
}

int main() {
	truck t1, t2;
	automobile c;
	
	t1.set_wheels(18);
	t1.set_pass(2);
	t1.set_cargo(3200);
	
	t2.set_wheels(6);
	t2.set_pass(3);
	t2.set_cargo(1200);

	t1.show();
	cout << "\n";
	t2.show();
	cout << "\n";

	c.set_wheels(4);
	c.set_pass(6);
	c.set_type(van);
	c.show();
	return 0;
}

기본 클래스 접근 제어
파생 클래스 내에서 기본 클래스 멤버들에 대한 접근 상태는 기본 클래스를 상속할 때 사용된 접근지정자에 의해 결정된다.
class truck : public road_vehicle {

기본 클래스 접근 지정자
1. public
-기본 클래스의 모든 공용 멤버들은 파생 클래스의 공용 멤버가 된다.
-기본 클래스의 전용 멤버들은 그 클래스에 대한 전용으로 남으며, 파생 클래스의 멤버들에 의해 접근될 수 없다.
2. private : 디폴트(명시되지 않을 경우)
-기본 클래스의 공용 멤버들도 파생 클래스의 전용 멤버가 된다.
3. protected
-기본 클래스의 모든 공용 멤버와 보호 멤버들은 파생 클래스의 보호 멤버가 된다.

보호 멤버 사용하기
protected를 사용함으로써 기본 클래스에 전용인 클래스 멤버들을 생성할 수 있으며
또한 클래스 멤버들은 상속될 수 있으며 파생 클래스에 의해 접근될 수 있다.
기본 클래스가 공용으로 상속될 때, 기본 클래스에 있는 보호 멤버들은 파생 클래스의 보호 멤버가 되며,
파생 클래스에서 접근 가능하다.
자식 클래스에서 접근 가능하다는 점만 빼면 private와 똑같다.
ex)
#include <isotream>
using namespace std;

class base {
protect:
	int i, j	// base에 전용이다. 그러나 derived에서 접근 가능하다.
public:
	void set(int a , int b) { i = a; j = b; }
	void show() { cout << i << " " << j << "\n";
};

// i와 j는 protected로 상속된다.
class derived1 : public base {
private:	
	int k;
public: 
	// base의 i와 j를 접근할 수 있다.
	void setk() { k = i * j; }
	void showk() { cout << k << "\n"; }
};
// i와 j는 간접적으로 derived1을 통해 상속된다.
class derived2 : public derived1 {
private:
	int m;
public:
	voie setm() { m = i - j }; 	// 옳다.
	void showm() { cout << m << "\n"; }
};

int main() {
	derived1 ob1;
	derived2 ob2;
	
	ob1.set(2, 3) 	// OK, derived에게 알려져 있다.
	ob1.show();	// OK, derived에게 알려져 있다.
	ob1.setk();	
	ob1.showk();

	ob2.set(3, 4);
	ob2.show();
	ob2.setk();
	ob2.setm();
	ob2.showk();
	ob2.showm();

	return 0;
}

여러 개의 기본 클래스를 상속받기
// 여러 기본 클래스들의 예
#include <iostream>
using namespaces td;

class base1 {
protected:
	int x;
public:	
	void showx() { cout << x << "\n"; }
};
class base2 {
protected:
	int y;
public:
	void showy() { cout << y << "\n"; }
};

// 여러 개의 기본 클래스들을 상속받는다.
class dervied : public base1, public base2 {
public:
	void set(int i, int j) { x = i, y = j; }
};

int main() {
	derived ob;
	ob.set(10, 20); 	// derived에 의해 제공된다.
	ob.showx();	// base1에서부터
	ob.showy()	// base2에서부터
	return 0;
}

생성자, 소멸자, 그리고 상속
생성자와 소멸자가 언제 실행되는가?
1. 파생 클래스의 객체가 생성될 때
- 기본 클래스 생성자가 처음으로 호출되고,
- 파생 클래스 생성자가 그 뒤를 따른다.
2. 파생 클래스의 객체가 소멸될 떄
- 파생 클래스의 소멸자가 먼저 호출
- 기본 클래스의 소멸자가 뒤따른다.
- 소멸자들은 파생된 순서의 역순으로 실행된다.

ex)
#include <iostream>
using namespace std;

class base {
public:
	base() { cout << "Constructing base\n"; }
	~base() { cout << "Destructing base\n"; }
class derived : public base {
pbulic:
	derived() { cout << "Constructing derived\n"; }
	~dervied() { cout << "Destructing derived\n"; }
};
int main() {
	derived ob;
	// ob를 생성하고, 소멸하는 것 이외에는 아무 것도 하지 않는다.
	return 0;
}

#include <iostream>
using namespace stdl

class base {
public:
	base() { cout << "Constructing base\n"; }
	~base() { cout << "Destructing base\n"; }
};

class derived1 : public base {
public:
	derived1() { cout << "Constructing derived1\n"; }
	~derived1() { cout << Destructing derived1\n"; }
};

class derived2 : public derived1 {
public:
	derived2() { cout << "Constructing derived2\n"; }
	~derived2() { cout << "Destructing derived2\n"; }
};

int main() {
	derived ob;	// ob를 생성하고 소멸한다.
	return 0;
};
