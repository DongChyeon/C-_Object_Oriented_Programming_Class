함수

지역변수 : 선언된 블록 내에 있는 문장들에서만 사용
형식매개변수 : 함수 선언 시 사용된 인수로 함수 내에서 지역변수처럼 사용
전역변수 : 함수의 밖에서 선언, 프로그램 내 어디서나 사용될 수 있음. 프로그램 실행 동안 그 값이 유지됨
전역변수와 지역변수의 이름이 같을 때는 지역변수가 우선순위
ex) for(int i = 0; i<10; i++) 안에서 i는 for문내에서만 유효한 for내의 지역변수

포인터와 함께 함수 호출
함수의 매개변수를 포인터형으로 선언
포인터를 사용하는 함수 내의 연산을 수행할 떄 그 포인터가 가리키는 변수에서 작동

배열과 함께 함수 호출
함수의 매개변수를 배열로 선언한다.
컴파일러가 매개변수를 포인터로 변환한다.
함수 호출시에 배열에 대한 오직 하나의 포인터만이 전달된다.
C++는 배열의 경계를 확인하지 않으므로 배열의 실제크기는 중요하지 않다
ex) 함수를 선언할 때 display(int num[]) or display(int *num) 주로 전자가 선호.

문자열 전달
문자열이 함수에 전달될 떄, 그 문자열의 시작에 대한 포인터가 실제 전달된다.
ex) char str[80]일 떄 매개변수를 (char *str)로 쓸 수도 (char str[])로 써도 됨.

main 함수의 매개변수 : argc와 argv
명령어 라인 인수
프로그램이 실행할 때의 정보 전달
명령어 라인에서 프로그램의 이름 뒤에 오는 정보
argc : 명령어 라인에 있는 인수들의 수를 저장, 프로그램의 이름도 하나의 인수로 취급
argv : 문자형 포인터 배열에 대한 포인터
        argv[0]은 프로그램의 이름, argv[1]은 첫 번째 인수, argv[2]는 두 번째 인수...
명령어 라인 인수는 빈칸 또는 탭에 의해 구분

return의 기능
함수의 호출부분으로 즉각 되돌아가게 한다.
하나의 값을 반환하기 위해 사용될 수 있다. 단, void로 선언된 함수는 반환 못함

void 함수
값을 반환하지 않는 함수
함수를 식에 사용하는 것을 방지
ex) void print_vertical(char *str);
    x = print_vertical("hello"); // 에러
함수를 우연히 잘못 사용하는 것을 방지

C++이 함수에서 C언어와 다른 점
인수 전달을 위한 두 가지 방법
1. 값에 의한 호출 (call-by-value)
인수의 값을 함수의 형식 매개변수로 복사
함수의 매개변수 변화는 호출한 함수의 인수에게 영향을 주지 않음
ex) void swap(int x, int y);
int main() {
	swap(a, b);
}

2. 참조에 의한 호출 (call-by-reference)
인수의 주소(값 x)를 매개변수로 복사
함수의 매개변수 변화는 호출한 함수의 인수에게 영향을 줌
포인터를 함수에 전달하고 포인터 연산자를 사용하여 인수에 접근한다
매개변수의 앞에 &를 붙임으로써 선언한다.(참조 매개변수 사용)
ex) void swap(int *x, int *y);	// 포인터 매개변수
int main() {
	swap(&a, &b);
}

void f(int &i);	// 참조 매개변수
int main() {
	f(val);	// 실제 val의 값이 10으로 변함
}
void f(int &i) {
	i = 10;
}

참조 매개변수 선언하기
&는 변수 이름이 아닌 자료형과 연관
ex) swap(int& x, int &y) = swap(int &x, int &y)
int *p = int* p
int* a, b (a는 정수형 포인터, b는 정수형 변수 // 실수 주의!!)

주로 포인터 매개변수보다는 참조 매개변수를 사용한다
주의할점
참조 변수를 다시 참조할 수 없다.
참조 배열을 생성할 수 없다.
참조 변수에 대한 포인터를 생성할 수 없다. 즉, 참조변수에 & 연산자를 쓸 수 없다.
참조는 비트-필드에 허용되지 않는다.

C++의 오버로딩
둘 또는 그 이상의 함수가 매개변수 선언이 다르면 같은 이름이 공유할 수 있는 성질
ex) void function(); void function(int x, int y);

디폴트 함수 인수
매개변수에게 주어지는 디폴트 값 : 함수 호출 시에 매개변수에 대응하는 인수가 없을시 자동으로 사용
ex) int func(int a, int b=25) {};
복잡한 함수에 대한 호출을 단순화하기 위해 사용, 함수 중복의 축약 형식으로 사용
1. 디폴트 값은 오직 한 번만 명시되어야만 한다
2. 함수가 파일 내에서 선언되는 처음에 명시되어야만 한다
3. 디폴트 값을 취하는 매개변수를 정의하기 시작했다면, 디폴트 값을 갖지 않는 매개변수를 명시할 수 없다
(앞에 있는 매개변수에 디폴트 값을 주면 뒤따라 오는 매개변수에도 디폴트 값을 줘야 한다.)
4. 중복 함수의 다른 버전은 다른 디폴트 인수를 가질 수 있다.

ex) void func(int num = 0, char ch = 'x')
func(1, 'A')	// 둘다 전달
func(10, 1)	// num에게만 값 전달, ch는 디폴트 값을 사용
func()	// 둘다 디폴트 값 사용

함수 중복과 애매모호함
정확히 중복된 함수의 두 개이상에서 컴파일러가 어떤 것을 선택할지 모름(컴파일 X)
C++의 자동 형변환은 편리하지만 애매모호함이 자주 발생
ex) float func(float i); double func(double i);
func(10.1)일때는 double func(double i)를 호출
하지만 func(10)이면 애매모호함 발생 // 컴파일에러