변수의 선언
형식 : type variable_list;

변수명 작성 규칙
영문자, 숫자, _ 사용 가능
반드시 '_' 또는 알파벳 영문자로 시작해야 한다
예약어 사용 불가
중간에 공백을 쓸 수 없다
특수문자 사용 불가
대문자와 소문자를 구별
ex)
int i, j;
char ch;
float f, balance;
double d;

변수의 선언 위치에 따른 구분
지역 변수 : 함수 내
형식 매개변수 : 함수 매개변수의 정의 부분
전역 변수 : 모든 함수의 외부

지역변수
함수 내에 선언되는 변수
생성 시기 : 함수가 호출될 때
소멸 시기 : 함수가 사라질 때
지역 변수는 함수 호출들 사이에서 자신의 값을 유지하지 않음
동적 변수 또는 자동 변수라 부름

형식 매개변수
매개변수의 선언은 함수 이름 다음에 오며 괄호 안에 잇다
매개변수의 자료형 파악
매개변수들은 함수로 전달되는 정보를 받는다
지역 변수로써 함수 내에서 사용됨

전역 변수
프로그램이 끝날 때까지 값을 유지
모든 함수의 외부에 선언
어떠한 함수에서도 접근 가능
프로그램의 맨 앞에 전역 변수를 선언하는 것이 좋다

형 수정자
기본 자료형의 의미를 수정하여 그 자료형이 다양한 상황의 요구에 좀 더 정확히 맞도록 하기 위해 사용
char, int, double 자료형 앞에 수정자를 붙일 수 있다.
종류 : signed, unsigned, long, short

리터럴
프로그램에 변경될 수 없는 고정된 값
상수라고도 함
종류
문자형 : 작은 따옴표 사이에 둔다.
ex) ch = 'Z'; wc=L'A';	(긴 문자 리터럴은 문자 앞에 L을 쓴다)
정수형 : 소수 부분이 없는 수
부동소수형 : 소수점과 그 뒤에 소수 부분이 있는 수
16진수와 8진수 리터럴
ex) hex = 0xFF;	// 10 진수로 255
     oct = 011; 	// 10 진수로 9
문자열 리터럴 : 큰 따옴표 안에 쓴 문자들의 집합
ex) "this is a test"
(문자열과 문자들을 혼동해서는 안 된다.

리터럴의 크기 결정 방법
C++ 컴파일러에 의한 잠정적인 결정
-정수는 int에서부터 시작해서 그 정수를 저장할 수 있는 가장 작은 자료형
-부동소수형은 double
사용자의 명시적인 형선언
-숫자인 경우 접미사를 사용
ex) long int	35000L, -34L

연산자
컴파일러에게 특정한 수학적 또는 논리적 연산을 수행할 것을 말해주는 기호
종류 : 산술, 관계 및 논리, 비트 연산자

산술 연산자 우선 순위
++ --
- (음수 기호)
* / %
+ -

관계와 논리 연산자 우선 순위
!
> >= < <=
== !=
&&
||

식
식에서의 형 변환
서로 다른 형의 리터럴과 변수가 식에 섞여 있을 때 이들은 같은 형으로 변환
정수형 승진
-모든 char와 short int 값을 자동적으로 int로 변환
형 승진
-모든 피연산자들은 가장 큰 피연산자의 형으로 변환

bool로의 상호 변환
bool형의 값은 정수형 식에서 자동으로 정수 0 또는 1로 변환

형 변환자
어떤 식을 형 변환자를 사용하여 강제로 특정한 형이 되도록 하는 것
연산자로서 변환자는 단항 연산자이며 다른 단항 연산자와 같은 우선 순위를 갖는다
형식 : (type) expression
ex) (float) x / 2

 