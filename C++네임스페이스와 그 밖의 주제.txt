C++ 네임스페이스와 그 밖의 주제

네임스페이스
namespace 키워드는 선언 영역을 생성함으로써 전역 네임스페이스를 분할할 수 있게 해준다
namespace는 하나의 범위를 정의한다
형식
namespace name {
	// delcarations
}
namespace 문장 내에 정의된 것은 그 네임스페이스의 범위 내에 있게 된다
네임스페이스 내부에서, 그 네임스페이스 내에 선언된 식별자들은 직접 참조될 수 있다

ex)
namespace CountNameSpace {
	int upperbound;
	int lowerbound;

	class counter {
	private:
		int count;
	public:
		counter(int n) {	
			if (n <= upperbound) count = n;
			else count = upperbound;
		}
		void reset(int n) {
			if (n <= upperbound) count = n;
		}
		int run() {
			if (count > lowerbound) return count--;
			else return lowerbound;
		}
	};
}

int main() {
	CounterNameSpace::upperbound = 100;	// 네임스페이스 외부에서 네임스페이스의 멤버를 접근할 때는
	CounterNameSpace::lowerbound = 0;		// 네임스페이스 이름, 범위 지정 연산자, 멤버의 이름 순으로 쓴다.

	CounterNameSpace::counter ob1(10);
	int i;

	do {
		i = ob1.run();
		cout << i << " ";
	} while (i > CounterNameSpace::lowerbound);
	cout << endl;
	
	CounterNameSpace::counter ob2(20);
	
	do {
		i = ob2.run();	
		cout << i << " ";
	} while (i > CounterNameSpace::lowerbound);
	cout << endl;

	ob2.reset(100);
	CounterNameSpace::lowerbound = 90;
	do {
		i = ob2.run()'
		cout << i << " ";
	} while (i > CounterNameSpace::lowerbound);
	
	return 0;
}	

using
네임스페이스와 범위 지정 연산자를 매번 명시하지 않을 수 있도록 함
형식
using namespace name;
-명시된 네임스페이스 내에 정의된 모든 멤버들이 지정자 없이 사용될 수 있다.
ex)
using namespace CounterNameSpace;		// 모든 멤버들이 지정된다.
upperbound = 100;	// 모든 멤버들이 지정되었기 때문에, OK.

using name::member;
-네임스페이스의 특정한 멤버만 지정된다
ex)
using CounterNameSpace::lowerbound;	// lowerboudn만 지정된다.
lowerbound = 10;		// lowerbound가 지정되었기 때문에, OK.

std 네임스페이스
표준 C++는 std라는 자신의 네임스페이스에 전체 라이브러리를 정의한다.
ex)
using namespace std;
-std 네임스페이스가 현재 네임스페이스로 되게 한다
-std:: 라는 지정자 없이 라이브러리 내에서 정의된 함수와 클래스의 이름들을 직접 접근할 수 있게 한다
using std::cout;
-표준 라이브러리에서 cout에 대한 접근만 얻을 수 있다

함수에 대한 포인터
함수 포인터
함수도 메모리 속에 물리적인 위치를 가지므로 포인터에 저장될 수 있다
또한 함수포인터를 이용하여 함수가 다른 함수에 대한 인수로 전달될 수 있게 한다
포인터에 저장된 주소는 함수의 시작 지점
함수의 주소는 괄호 또는 인수 없이 함수의 이름을 이용하여 얻는다

ex)
#include <iostream>
using namespace std;

void vline(int i), hline(int i);

int main() {
	void (*p)(int i);
	p = vline;		// vline()을 가리킨다
	(*p)(4);	// vline()을 호출한다.
	p = hline;	// hline()을 가리킨다
	(*p)(3);	// hline()을 호출한다
	
	return 0;
}

void hline(int i) {
	for ( ; i; i--) cout << "-";
	cout << "\n";
}

void vline(int i) {
	for ( ; i; i--_ cout << "|\n";
}

정적 클래스 멤버
static 멤버는 그 클래스의 모든 객체들에 의해 공유된다
static 데이터는 첫 번째 객체가 생성될 때 0으로 초기화된다
클래스 내에 static 데이터 멤버를 선언할 때 클래스의 외부에서 전역 정의를 제공해야만 한다
-범위 지정 연산자를 사용하여 그 static변수를 재정의하여 static 변수를 위한 공간이 할당되게 한다

ex)
#include <iostream>
using namespace std;

class ShareVar {
private:
	static int num;
public:
	void setnum(int i) { num = i; }
	void shownum() { cout << num << " ";}
};

int ShareVar::num;	// 전역 선언

int main() {
	ShareVar a, b;
	
	a.shownum();	// 0을 출력한다
	b.shownum();	// 0을 출력한다

	a.setnum(10);	// static num에 10 저장

	a.shownum();	// 10을 출력한다
	b.shownum();	// 또한 10을 출력한다

	return 0;
}

const 멤버 함수와 mutable
const로 선언된 클래스 멤버 함수는 그 함수 내에서 클래스의 멤버 변수를 변경할 수 없게 한다
ex)
class X {
	int some_var;
public:
	int f1() const;	// const 멤버 함수
};
mutable로 선언된 멤버 변수는 const 멤버 함수에 의해 수정될 수 있다

멤버 초기화 구문
초기화하길 원하는 멤버들은 클래스 생성자 뒤에 오며, 생성자 이름과 인수 리스트는 콜론으로 구분한다
형식
constructor(arg-liast): member1(initializer),
	member2(initializer),
	// ...
	memberN(initializer)
{
	// body of constructor
}

ex)
#include <iostream>
using namespace std;

class myclass {
	const int numA;	// const 멤버
	const int numB;	// const 멤버
public:
	// 초기화 구문을 이용하여 numA와 numB를 초기화한다
	myclass(int x, int y) : numA(x), numB(y) {}

	int getNumA() { return numA; }
	int getNumB() { return numB; }
};

int main() {
	myclass ob1(7, 9), ob2(5, 2);
	cout << "Values in ob1 are " << ob1.getNumB() << " and "
	<< ob1.getNumA() << endl;
	
	cout << "Values in ob2 are " << ob2.getNumB() << " and "
	<< ob2.getNumA() << endl;

	return 0;
}